const express = require('express');
const app = express();

const mongoose = require('mongoose');
const ObjectId = mongoose.Types.ObjectId;

const jwt = require('jsonwebtoken');
// const bcrypt = require('bcrypt');
const { hashPassword, comparePassword } = require('../utils/encrypt/hashPassword.js');

const secretKey = process.env.SECRET_KEY;

const validateEmail = require('../utils/user.js')

// dts_insert, dts_update 필드에 삽입할 변수 값 설정
const currentDate = new Date();
const dateString = currentDate.toISOString().slice(0, 10).replace(/-/g, "");    // 현재 날짜를 "yyyymmdd" 형식으로 설정
const timeString = currentDate.toTimeString().slice(0, 8).replace(/:/g, "");    // 현재 시간을 "hhmmss" 형식으로 설정

const userRepository = require('../repositories/userRepository');

const userService = {

  async postSignUp(newUserInfo) {
    try {
      const newUser = await userRepository.createUser(newUserInfo);
      return newUser;
    } catch (err) {
      console.error(err);
      throw new Error('Invalid Error');
    }
  },

  async postSignIn(user) {
    try {
      // JWT 토큰 생성
      const payload = {
        user_id: user._id,          // 사용자의 MongoDB ObjectID
      }
      const token = jwt.sign(payload, secretKey, { expiresIn: "3d" }); 
      console.log(token);
      return token;
    } catch (err) {
      console.error(err);
      throw new Error('Invalid Error');
    }
  },

  async getUserInfoById(user_id) {
    try {
      const findUser = await userRepository.findUserById(user_id); 
      return findUser;
    } catch (err) {
      console.error(err);
      throw new Error('Invalid Error');
    }
  },

  async getUserInfoByEmail(email) {
    try {
      const findUser = await userRepository.findUserByEmail(email);  
      return findUser;
    } catch (err) {
      console.error(err);
      throw new Error('Invalid Error');
    }
  },

  async updateUserInfo(user_id, updateUserInfo) {
    try {
      const updatedUser = await userRepository.updateUser(user_id, updateUserInfo);
      return updatedUser;
    } catch (err) {
      console.error(err);
      throw new Error('Invalid Error');
    }
  },

  async deleteUserInfo(deleteUserInfo){
    try {
      const { user_id, email, password } = deleteUserInfo;

      // 비밀번호 암호화
      // const hashedPassword = await bcrypt.hash(password, 10);
      const hashedPassword = await hashPassword(password);

      const deleteUser = await userRepository.deleteUser({
        user_id,
        email,
        password: hashedPassword
      });

      return deleteUser;
    } catch (err) {
      console.error(err);
      throw new Error('Invalid Error');
    }
  }
}

module.exports = userService;